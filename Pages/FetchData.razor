@page "/fetchdata"
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.Data
@using Services
@using UtilsFolder.Enums
@inject IIngredientService ingService
@inject IMealPlanService mpService
@inject IDailyMenuService dmService

<PageTitle>Weather forecast</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (mealPlanResponse == null)
{
    <MudText> Your meal plan is generating at this moment.</MudText>
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    if(!mealPlanResponse.IsSuccessStatusCode)
    {
        <MudText> Error @mealPlanResponse.ReasonPhrase </MudText>
    }
    else
    {
        mealPlan = mealPlanResponse.Content.ReadFromJsonAsync<DailyMenuDto?>().Result;
        if (mealPlan != null)
        {
            <MudText> @mealPlan.CarbohydratesTotal </MudText>
            @foreach (var recipe in mealPlan.MenuRecipes)
            {
                <MudText>@recipe.Recipe.Name</MudText>

            }
        }
    }
}

@if (ingredientsResponse == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="ingredientsResponse.Content.ReadFromJsonAsync<ICollection<IngredientDto>?>().Result" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<IngredientDto, object>(x=>x.Id)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<IngredientDto, object>(x=>x.IsAnimal)">Temp. (C)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<IngredientDto, object>(x=>x.ContainsGluten)">Temp. (F)</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Id</MudTd>
            <MudTd DataLabel="Temp. (C)">@context.IsAnimal</MudTd>
            <MudTd DataLabel="Temp. (F)">@context.ContainsGluten</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private HttpResponseMessage? ingredientsResponse;
    private HttpResponseMessage? mealPlanResponse;
    private DailyMenuDto? mealPlan;
    protected override async Task OnInitializedAsync()
    {
        ingredientsResponse = await ingService.FindByPrimaryGroup("Frutas");
        mealPlanResponse = await dmService.GenerateDailyMenu(1900, MealType.Lunch, Satiety.Filling);
    }
}
