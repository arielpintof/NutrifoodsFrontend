@page "/MealPlan"
@inject AuthenticationStateProvider AuthState
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.Services
@inject IMealPlanService mealPlanService


@if (mealPlanResponse == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    @if (!mealPlanResponse.IsSuccessStatusCode)
    {
        <MudText> Error @mealPlanResponse.ReasonPhrase </MudText>
    }
    else
    {
        mealPlan = mealPlanResponse.Content.ReadFromJsonAsync<MealPlanDto>().Result;
        <!-- MealPlan recibe una Regimen alimentario -->
        <MudContainer MaxWidth="MaxWidth.Small">

            <!-- Input: Cantidad de calorías | Destino: Componente hijo CaloriesTotal -->
            <CaloriesTotal Energy="CalculateEnergy()" />
            @foreach(var menu in mealPlan.MealMenus)
            {
            
                <div class="mt-3">
                    <!-- Input: Comida del día | Destino: Componente hijo MealComponent -->
                    <MealComponent MenuRecipes=@menu.MenuRecipes />
                </div>
            }

            <div class="d-flex justify-space-between mt-3 mb-3">
                <MudButton 
                    Style="width: 175px; height: 50px;" 
                    Class="pa-3 rounded-pill" 
                    Size="Size.Large" 
                    Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    ButtonType="ButtonType.Submit">
                    Confirmar
                </MudButton>
                <MudButton 
                    Style="width: 175px; height: 50px;" 
                    Class="pa-3 rounded-pill" 
                    Size="Size.Large" 
                    Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    ButtonType="ButtonType.Submit">
                    Regenerar
                </MudButton>
            </div>
        </MudContainer>        
    }
}



@code {
    
    private bool IsAuthenticated = false;

    //[Parameter]
    public HttpResponseMessage? mealPlanResponse { get; set; }
    public MealPlanDto? mealPlan { get; set; }

    public int Energy;

    public int _energy
    {
        get { return Energy; }
        set { Energy = CalculateEnergy(); }
    }

    protected override async Task OnInitializedAsync()
    {
        /*var state = await AuthState.GetAuthenticationStateAsync();
        IsAuthenticated = state.User.Identity.IsAuthenticated;*/

        mealPlanResponse = await mealPlanService.GenerateBasedOnMbr(2000, "Y", "Normal", "Normal");
        await base.OnInitializedAsync();
    }

    public int CalculateEnergy()
    {
        var mealMenus = mealPlan.MealMenus.Sum(e => e.EnergyTotal);
        return Convert.ToInt32(mealMenus);

    }
}