@page "/Body"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using UtilsFolder.Enums
@inject AuthenticationStateProvider AuthState

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper>
        <MudForm @ref="Form" @bind-IsValid="@Success" @bind-Errors="@Errors">
            <div class="d-flex flex-column pa-4">
                <MudText Typo="Typo.h5" Class="pa-4">Métricas Corporales</MudText>
                <div class="d-flex">
                    <MudTextField 
                        @bind-Value="HeightValue"
                        Class="pa-4"  
                        Label="Altura" 
                        Variant="Variant.Outlined" 
                        Adornment="Adornment.End" 
                        AdornmentText="Centímetros" 
                        AdornmentColor="Color.Info"
                        Required="true" 
                        RequiredError="La altura es obligatoria" />
                    <MudTextField 
                        Class="pa-4" 
                        @bind-Value="WeightValue" 
                        Label="Peso" 
                        Variant="Variant.Outlined" 
                        Adornment="Adornment.End" 
                        AdornmentText="Kilogramos" 
                        AdornmentColor="Color.Info"
                        Required="true"
                        RequiredError="El peso es obligatorio" />
                </div>
                <div class="pa-4 ">

                    <MudSelect Required="true" Dense="true" @bind-Value="PhysicalValue" Class="pb-4" Label="Actividad Física" Variant="Variant.Outlined">
                        @foreach (PhysicalActivityEnum item in PhysicalActivityEnum.List)
                        {
                            <MudSelectItem Value="@item">@item.ReadableName</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Required="true" Dense="true" @bind-Value="IntendedUseValue" Class="pb-4" Label="Proposito de uso" Variant="Variant.Outlined">
                        @foreach (IntendedUseEnum item in IntendedUseEnum.List)
                        {
                            <MudSelectItem Value="@item">@item.ReadableName</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect Required="true" Dense="true" @bind-Value="UpdateFrequencyValue" Class="pb-4" Label="Periocidad" Variant="Variant.Outlined">
                        @foreach (UpdateFrequencyEnum item in UpdateFrequencyEnum.List)
                        {
                            <MudSelectItem Value="@item">@item.ReadableName</MudSelectItem>
                        }
                    </MudSelect>
                    <div class="mt-5">
                        <MudButton Class="pa-3" 
                                   Disabled="@(!Success)" 
                                   Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   Href="https://localhost:5001/mealplan"
                                   FullWidth="true">
                                   Siguiente
                        </MudButton>
                    </div>

                    
                </div>
            </div>
        </MudForm>

    </MudPaper>
</MudContainer>

    @code {
    private bool Success;
    private string[] Errors = { };
    private int? WeightValue { get; set; }
    private int? HeightValue { get; set; }
    private double? ImcValue { get; set; } = 25;
    private MudForm? Form;
    public PhysicalActivityEnum? PhysicalValue { get; set; }
    public UpdateFrequencyEnum? UpdateFrequencyValue { get; set; }
    public IntendedUseEnum? IntendedUseValue { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthState.GetAuthenticationStateAsync();
        var apiKey = authenticationState.User.Claims.Where(c => c.Type.Equals("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")).Select(c => c.Value).FirstOrDefault() ?? string.Empty;

        //AQUI DEBERIA ESTAR EL ENDPOINT CON TODOS LOS PARAMETROS

        await base.OnInitializedAsync();
    }



}
