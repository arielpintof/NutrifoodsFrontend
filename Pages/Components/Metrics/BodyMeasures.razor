@page "/Body"
@using UtilsFolder.Enums
@using UtilsFolder.ToolTip
@using NutrifoodsFrontend.Services
@using NutrifoodsFrontend.Data.Dto
@inject AuthenticationStateProvider AuthState
@inject IUserService UserService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper>
        <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
            <div class="d-flex flex-column pa-4">
                <MudText Typo="Typo.h5" Class="pa-4">Métricas Corporales</MudText>
                <div class="d-flex">
                    <MudTextField @bind-Value="_heightValue" Class="pa-4" Label="Altura" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" AdornmentText="Centímetros" AdornmentColor="Color.Info"
                                  Required="true" RequiredError="La altura es obligatoria"/>
                    <MudTextField Class="pa-4" @bind-Value="_weightValue" Label="Peso" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" AdornmentText="Kilogramos" AdornmentColor="Color.Info"
                                  Required="true" RequiredError="El peso es obligatorio"/>
                </div>
                <div class="pa-4">
                    <MudSelect Required="true" Dense="true" @bind-Value="_physicalValue" Class="pb-4" Label="Actividad Física"
                               Variant="Variant.Outlined">
                        @foreach (var item in PhysicalActivityList)
                        {
                            <MudSelectItem Value="@item">@item.ReadableName</MudSelectItem>
                        }
                    </MudSelect>

                    <div class="mt-5">
                        <MudButton Class="pa-3" Disabled="@(!_success)" Variant="Variant.Filled" Color="Color.Primary"
                                   Href="https://localhost:5001/mealplan" OnClick="async () => await SaveBodyMeasures()" FullWidth="true">
                            Siguiente
                        </MudButton>
                    </div>
                </div>
            </div>
        </MudForm>

    </MudPaper>
</MudContainer>

@code {
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };
    private double? _weightValue;
    private int? _heightValue;
    private PhysicalActivityEnum? _physicalValue;
    
    private static IEnumerable<PhysicalActivityEnum> PhysicalActivityList => PhysicalActivityEnum.NonNullValues;
    
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthState.GetAuthenticationStateAsync();
        var apiKey = authenticationState.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var findUserResponse = await UserService.Find(apiKey);
        var userContent = await findUserResponse.Content.ReadFromJsonAsync<UserDto>();
        if (userContent.UserBodyMetrics.Count() != 0)
        {
            NavigationManager.NavigateTo("/mealplan");
        }
        
        await base.OnInitializedAsync();
    }

    private async Task SaveBodyMeasures()
    {
        var authenticationState = await AuthState.GetAuthenticationStateAsync();
        var apiKey = authenticationState.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var findUserResponse = await UserService.Find(apiKey);
        if (findUserResponse.IsSuccessStatusCode)
        {
            var userContent = await findUserResponse.Content.ReadFromJsonAsync<UserDto>();
            if (userContent.UserBodyMetrics.Count != 0) return;
            
        }
        
        await UserService.SaveMetrics(
            apiKey, (int) _heightValue!, (double) _weightValue!, PhysicalActivityEnum.FromValue(_physicalValue).Token);

   
    }


}