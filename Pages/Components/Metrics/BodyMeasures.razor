@page "/Body"
@using UtilsFolder.Enums
@using UtilsFolder.ToolTip
@using UtilsFolder.Nutrition
@using NutrifoodsFrontend.Services
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.UtilsFolder.Validation
@inject AuthenticationStateProvider AuthState
@inject IUserService UserService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<MudContainer Class="mt-6" MaxWidth="MaxWidth.Small">
    <MudPaper>
        <MudForm @ref="_form" Validation="_metricValidator.ValidateValue" @bind-IsValid="@_success" @bind-Errors="@_errors"
                 Model="_metricModel">
            <div class="d-flex flex-column pa-4">
                <MudText Typo="Typo.h5" Class="pa-4">Métricas Corporales</MudText>
                <div class="d-flex">
                    <MudTextField @bind-Value="_metricModel.Height" Class="pa-4" Label="Altura" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" AdornmentText="Centímetros" AdornmentColor="Color.Info"
                                  Required="true" RequiredError="La altura es obligatoria" For="@(() => _metricModel.Height)"/>
                    <MudTextField Class="pa-4" @bind-Value="_metricModel.Weight" Label="Peso" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" AdornmentText="Kilogramos" AdornmentColor="Color.Info"
                                  Required="true" RequiredError="El peso es obligatorio" For="@(() => _metricModel.Weight)"/>
                </div>
                <div class="pa-4">
                    <MudSelect Required="true" Dense="true" @bind-Value="_metricModel.PhysicalActivity" Class="pb-4"
                               Label="Actividad Física" Variant="Variant.Outlined" For="@(() => _metricModel.PhysicalActivity)"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var item in PhysicalActivityList)
                        {
                            <MudSelectItem Value="@item.ReadableName">@item.ReadableName</MudSelectItem>
                        }
                    </MudSelect>

                    @if (_metricModel.Height is not null && _metricModel.Weight is not null)
                    {
                        <div class="pa-4 d-flex flex-column">
                            <div class="d-flex justify-center">
                                <MudText Typo="Typo.h6">Tú IMC es</MudText>
                            </div>
                            <div class="d-flex flex-column justify-center">
                                <MudChip Size="Size.Large" Color="GetColorFromBmi(BodyMassIndex.Calculate(BmiMethod.Proposed, (double)_metricModel.Weight, (int)_metricModel.Height))">
                                    @BodyMassIndex.Calculate(BmiMethod.Proposed, (double)_metricModel.Weight, (int)_metricModel.Height)
                                </MudChip>
                                @{ var bmi = BodyMassIndex.Calculate(BmiMethod.Proposed, (double)_metricModel.Weight, (int)_metricModel.Height); }
                                @if (bmi is < 16 or > 35)
                                {
                                    <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Dense="true" Class="my-2">
                                        Debido a tus medidas, Nutrifoods no te tiene contemplado como usuario final,
                                        te recomendamos buscar asesoría de un profesional de la salud
                                    </MudAlert>
                                }
                            </div>
                        </div>
                    }
                    <div class="mt-5">
                        <MudButton Class="pa-3" Disabled="@(!_success)" Variant="Variant.Filled" Color="Color.Primary"
                                   Href="https://localhost:5001/mealplan" OnClick="async () => await SaveBodyMeasures()" FullWidth="true">
                            Siguiente
                        </MudButton>
                    </div>
                </div>
            </div>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? _form;
    private bool _success;
    private string[] _errors = { };
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    private UserBodyMetricValidator _metricValidator = new();
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    private UserBodyMetricDto _metricModel = new();

    private static IEnumerable<PhysicalActivityEnum> PhysicalActivityList => PhysicalActivityEnum.NonNullValues;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthState.GetAuthenticationStateAsync();
        var apiKey = authenticationState.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var findUserResponse = await UserService.Find(apiKey!);
        var userContent = await findUserResponse!.Content.ReadFromJsonAsync<UserDto>();
        if (userContent!.UserBodyMetrics.Count != 0)
        {
            NavigationManager.NavigateTo("/mealplan");
        }

        await base.OnInitializedAsync();
    }

    private async Task SaveBodyMeasures()
    {
        var authenticationState = await AuthState.GetAuthenticationStateAsync();
        var apiKey = authenticationState.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var findUserResponse = await UserService.Find(apiKey!);
        if (findUserResponse!.IsSuccessStatusCode)
        {
            var userContent = await findUserResponse.Content.ReadFromJsonAsync<UserDto>();
            if (userContent!.UserBodyMetrics.Count != 0) return;
        }

        await UserService.SaveMetrics(
            apiKey!, (int)_metricModel.Height!, (double)_metricModel.Weight!,
            PhysicalActivityEnum.FromReadableName(_metricModel.PhysicalActivity)!.Token);
    }

    private static Color GetColorFromBmi(double bmi)
    {
        return bmi switch
        {
            >= 16 and < 18.5 => Color.Warning,
            >= 18.5 and < 25 => Color.Success,
            >= 25 and < 35 => Color.Warning,
            _ => Color.Error
            };
    }


}