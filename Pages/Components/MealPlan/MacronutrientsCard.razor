@page "/card"
@using NutrifoodsFrontend.UtilsFolder.Nutrition


<div class="container">
    <div class="card-section">
        <div class="card">
            <div class="column-card">
                <MudText Class="text-section">Energía</MudText>
                <div class="d-flex align-end">
                    <MudText Class="text-value mr-1 value-animation">@InitialEnergy</MudText>
                    <MudText  Class="text-section mb-1">kcal</MudText>
                </div>

            </div>
            <MudIcon Icon="@Icons.Material.Filled.LocalFireDepartment" Color="Color.Primary" Size="Size.Large"></MudIcon>
        </div>

        <div class="card">
            <div class="column-card">
                <MudText Class="text-section">Carbs</MudText>
                <div class="d-flex align-end">
                    <MudText Class="text-value mr-1">@InitialCarbs</MudText>
                    <MudText Class="text-section mb-1">g</MudText>

                </div>
                @{
                    var lipidsValue = @Percentage(TotalMacronutrient("Lipids"));
                    var carbohydratesValue = @Percentage(TotalMacronutrient("Carbohydrates"));
                    var proteinsValue = @Percentage(TotalMacronutrient("Proteins"));
                }
            </div>
            <div>
                <MudProgressCircular Size="Size.Medium" Color="Color.Primary" Value="carbohydratesValue"/>
                <MudText class="percentage-text">@PercentageToInt(carbohydratesValue)%</MudText>
            </div>

        </div>
        <div class="card">
            <div class="column-card">
                <MudText Class="text-section">Lípidos</MudText>
                <div class="d-flex align-end">
                    <MudText Class="text-value mr-1">@InitialLipids</MudText>
                    <MudText Class="text-section mb-1">g</MudText>
                </div>

            </div>
            <div>

                <MudProgressCircular Size="Size.Medium" Color="Color.Primary" Value="lipidsValue"/>
                <MudText class="percentage-text">@PercentageToInt(lipidsValue)%</MudText>
            </div>

        </div>
        <div class="card">
            <div class="column-card">
                <MudText Class="text-section">Proteínas</MudText>
                <div class="d-flex align-end">
                    <MudText Class="text-value mr-1">@InitialProteins</MudText>
                    <MudText Class="text-section mb-1">g</MudText>
                </div>
            </div>
            <div >
                <MudProgressCircular Size="Size.Medium" Color="Color.Primary" Value="proteinsValue"/>
                <MudText class="percentage-text">@PercentageToInt(proteinsValue)%</MudText>
            </div>

        </div>

    </div>
</div>

@code {
    private int InitialEnergy { get; set; }
    private int InitialCarbs { get; set; }
    private int InitialLipids { get; set; }
    private int InitialProteins { get; set; }
    private int Total { get; set; }
    
    [Parameter]
    public Dictionary<string, int> Macronutrients { get; set; } = new();

    private int TotalMacronutrient(string macronutrient) =>
        Macronutrients
            .Where(c => c.Key.Contains(macronutrient))
            .Select(c => c.Value)
            .FirstOrDefault();
    

    protected override async Task OnParametersSetAsync()
    {
        Total = Macronutrients.Skip(1).Sum(e => e.Value);
        await Task.WhenAll(IncreaseEnergy(), IncreaseCarbs(), IncreaseLipids(), IncreaseProteins());
        
        foreach (var macro in Macronutrients)
        {
            Console.WriteLine($"The value of {macro.Key} is now: {macro.Value}");
        }
        
    }
    private double Percentage(int value)
    {
        return (100 * (double)value / Total);
    }

    private int PercentageToInt(double value)
    {
        return Convert.ToInt32(value);
    }

    private async Task IncreaseEnergy()
    {
        while (InitialEnergy < TotalMacronutrient("Energy"))
        {
            InitialEnergy+=30;
            await Task.Delay(1);
            StateHasChanged();
        }
        InitialEnergy = TotalMacronutrient("Energy");

    }
    private async Task IncreaseCarbs()
    {
        while (InitialCarbs < TotalMacronutrient("Carbohydrates"))
        {
            InitialCarbs+=3;
            await Task.Delay(1);
            StateHasChanged();
        }
        InitialCarbs = TotalMacronutrient("Carbohydrates");

    }
    private async Task IncreaseLipids()
    {
        while (InitialLipids < TotalMacronutrient("Lipids"))
        {
            InitialLipids+=1;
            await Task.Delay(1);
            StateHasChanged();
        }
        InitialLipids = TotalMacronutrient("Lipids");

    }
    private async Task IncreaseProteins()
    {
        while (InitialProteins < TotalMacronutrient("Proteins"))
        {
            InitialProteins+=1;
            await Task.Delay(1);
            StateHasChanged();
        }
        InitialProteins = TotalMacronutrient("Proteins");

    }


}

<style>
    .container{
        background-color: #FFFFFF;
        width: 100%;
        padding: 10px 35px 10px 35px;
        border-radius: 10px;
    }
    .container .card-section{
        display: flex;
        justify-content: center;
        gap: 10px;
    }
    .card-section .card{
        display: flex;
        gap: inherit;
        align-items: center;
        flex-direction: row;
    }
    .card:after{
        content: '';
        height: 30px;
        border-width: 1px;
        border-style: inset;
        background: linear-gradient(90deg, rgba(255,255,255,1) 0%, rgba(236,236,238,1) 51%, rgba(255,255,255,1) 100%);
    }
    .card:last-child:after{
        display: none;
    }
    
    .column-card{
        display: flex;
        flex-direction: column;
    }
    .text-section{
        font-size: 15px;
        color: #92959E;
        font-weight: 300;
    }
    .text-value{
        font-size: 22px;
        font-weight: 600;
    }
    .mud-progress-circular{
        margin-top: 5px;
    
    }
    .percentage-text{
        display: flex;
        font-size: 14px;
        color: #92959E;
        position: absolute;
        transform: translate(30%, -160%);
    }
    
    @@media (max-width: 581px){
        .mud-progress-circular{
                width: 30px !important;
                height: 30px !important;
         
        }
        .percentage-text{
            font-size: 10px;
            transform: translate(30%, -180%);
        }
        .text-value{
            font-size: 17px;
        }
        .text-section{
            font-size: 12px;
        }
        .mud-icon-size-large {
             font-size: 2rem !important;
         }
    }
     @@media (max-width: 500px){
        .mud-icon-size-large {
            display: none;
        }
        .mud-progress-circular{
            display: none;
        }
        .percentage-text{
            display: none;
        }
        .text-section{
            font-size: 14px;
        }
        .text-value{
            font-size: 18px;
        }
        
     }
</style>