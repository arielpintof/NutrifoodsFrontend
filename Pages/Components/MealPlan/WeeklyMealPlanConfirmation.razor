@page "/week-plan/confirmation"
@using NutrifoodsFrontend.UtilsFolder.ToolTip
@using NutrifoodsFrontend.Services
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.Data.State
@inject IUserService UserService
@inject AuthenticationStateProvider AuthState
@inject WeekPlanState WeekPlanState


@if (UserDto is not null)
{
    <MudContainer Class="mt-3" MaxWidth="MaxWidth.Medium">
        <div class="d-flex flex-column">
            <div class="d-flex justify-center">
                <h3>@UserDto.UserData!.Name, este es tu plan semanal</h3>
            </div>
            <div>
                <MudCarousel Class="d-flex mud-width-full" @ref="_carousel" ItemsSource="@WeekPlanState.WeekPlan" Style="height: 1000px;"
                             ShowArrows="true" ShowBullets="false" AutoCycle="false">
                    <ItemTemplate >
                        <MudContainer Class="align-self-center" MaxWidth="MaxWidth.ExtraSmall">
                            @foreach (var menu in context.DailyMenus)
                            {
                                <div class="mt-1">
                                    <MealComponent MenuRecipes=@menu.MenuRecipes MealType=@menu.MealType Satiety=@menu.Satiety
                                                   EnergyTotal=@menu.EnergyTotal IconIsVisible=@IconIsVisible>
                                    </MealComponent>
                                </div>
                            }
                        </MudContainer>
                    </ItemTemplate>
                </MudCarousel>
            </div>

        </div>

    </MudContainer>
}


@code {
    private UserDto? UserDto { get; set; }
    private MudCarousel<DailyMealPlanDto> _carousel = null!;
    private bool IconIsVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var apiKey = authState.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var userResponse = await UserService.Find(apiKey!);
        UserDto = await userResponse!.Content.ReadFromJsonAsync<UserDto>();

        await base.OnInitializedAsync();
    }

}