@page "/dailyconfiguration"

@using Microsoft.AspNetCore.Components
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.Data.State
@using NutrifoodsFrontend.Services
@using UtilsFolder.Enums;
@inject DailyConfigurationState DailyConfigurationState
@implements IDisposable

<MudDialog>
    <DialogContent>
        <MudContainer Class="px-10 py-5" MaxWidth="MaxWidth.Medium">
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudText Class="d-flex justify-center" Typo="Typo.h5">Configuración del día</MudText>
                <div class="d-flex flex-sm-column mt-5">
                    <MudSelect Required="true" @bind-Value="QuantityTest" T="int" Label="Cantidad de comidas" Variant="Variant.Outlined"
                               AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem T="int" Value="2"/>
                        <MudSelectItem T="int" Value="3"/>
                        <MudSelectItem T="int" Value="4"/>
                        <MudSelectItem T="int" Value="5"/>
                    </MudSelect>
                    <div class="flex-sm-column mt-5">
                        <div class="row d-flex align-center mt-2">
                            <MudCheckBox Disabled="_breakfastCheckBoxDisableValue" @bind-Checked="BreakfastCheckTest" Color="Color.Primary"
                                         UnCheckedColor="Color.Default" Class="mr-3">
                                Desayuno
                            </MudCheckBox>
                            <MudSelect Disabled="_breakfastSelectDisableValue" @bind-Value="BreakfastSatiety" Dense="true" Label="Contundencia"
                                       AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                                @foreach (var item in SatietyEnumList)
                                {
                                    <MudSelectItem Value="@item">@item.ReadableName</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                        <div class="row d-flex align-center mt-2">
                            <MudCheckBox Disabled="true" @bind-Checked="_launchCheck" Color="Color.Primary" UnCheckedColor="Color.Default"
                                         Class="mr-3">
                                Almuerzo
                            </MudCheckBox>
                            <MudSelect @bind-Value="LaunchSatiety" Dense="true" Label="Contundencia" Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter">
                                @foreach (var item in LunchSatietyEnumList)
                                {
                                    <MudSelectItem Value="@item">@item.ReadableName</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                        <div class="row d-flex align-center mt-2">
                            <MudCheckBox Disabled="_dinnerCheckBoxDisableValue" @bind-Checked="DinnerCheckTest" Color="Color.Primary"
                                         UnCheckedColor="Color.Default"
                                         Class="mr-11">
                                Cena
                            </MudCheckBox>
                            <MudSelect Disabled="_dinnerSelectDisableValue" @bind-Value="DinnerSatiety" Dense="true" Label="Contundencia"
                                       AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                                @foreach (var item in SatietyEnumList)
                                {
                                    <MudSelectItem Value="@item">@item.ReadableName</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                        <div class="row d-flex align-center mt-2">
                            <MudCheckBox Disabled="_snackCheckBoxDisableValue" @bind-Checked="_snackCheck" Color="Color.Primary"
                                         UnCheckedColor="Color.Default" Class="mr-3">
                                Merienda
                            </MudCheckBox>
                            <MudSelect Disabled="_snackSelectDisableValue" @bind-Value="_snackSatiety" Dense="true" Label="Hora"
                                       AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                                @foreach (var item in SnackEnumList)
                                {
                                    <MudSelectItem Value="@item">@item.ReadableName</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                     </div>
                </div>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <div class="px-14 mb-5">
            <MudButton OnClick="Cancel">Cancelar</MudButton>
            <MudButton @onclick="ChangePropertyValue" Disabled="@(!_success)" Variant="Variant.Filled" Color="Color.Primary">
                Confirmar
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code {
    private bool _success;
    private MudForm? _form;
    private string[] _errors = { };
    private bool _breakfastCheck;
    private bool _dinnerCheck;
    private bool _snackCheck;
    private bool _snackSelectDisableValue;
    private bool _breakfastSelectDisableValue;
    private bool _dinnerSelectDisableValue;
    private bool _breakfastCheckBoxDisableValue;
    private bool _dinnerCheckBoxDisableValue;
    private bool _snackCheckBoxDisableValue;

    private SnackEnum? _snackSatiety;
    
    [Parameter]
    public EventCallback OnDailyConfigurationChanged { get; set; }
    
    private int _mealsQuantity = 3;

    private bool _launchCheck = true;

    private static SatietyEnum? LaunchSatiety { get; set; } = SatietyEnum.Filling;
    
    private static SatietyEnum? BreakfastSatiety { get; set; } = SatietyEnum.Normal;
    
    private static SatietyEnum? DinnerSatiety { get; set; } = SatietyEnum.Normal;

    private static IEnumerable<SatietyEnum> SatietyEnumList => SatietyEnum.NonNullValues;

    private static IEnumerable<SatietyEnum> LunchSatietyEnumList => SatietyEnum.NonNullValues.Skip(1);

    public IEnumerable<SnackEnum> SnackEnumList = SnackEnum.List;
    

    protected override Task OnInitializedAsync()
    {
        QuantityCheck(_mealsQuantity);
        return base.OnInitializedAsync();
    }

    private async Task ChangePropertyValue()
    {
        var isLaunchFilling = LaunchSatiety == SatietyEnum.Filling;
        var breakfastSatiety = _breakfastCheck ? BreakfastSatiety!.Token : Satiety.None;
        var dinnerSatiety = _dinnerCheck ? BreakfastSatiety!.Token : Satiety.None;
        bool brunch, linner;
        if (_snackSatiety!.Token == Snack.Both)
        {
            brunch = true;
            linner = true;
        }
        else
        {
            brunch = _snackCheck && _snackSatiety!.Token == Snack.Brunch;
            linner = _snackCheck && _snackSatiety!.Token == Snack.Linner;
        }
        
        var dailyConfiguration = new DailyConfigurationDto
        {
            IsLunchFilling = isLaunchFilling,
            Breakfast = breakfastSatiety,
            Dinner = dinnerSatiety,
            Brunch = brunch,
            Linner = linner
        };
        
        DailyConfigurationState.Property = dailyConfiguration;
        await OnDailyConfigurationChanged.InvokeAsync();
        Submit();
    }
    
    int QuantityTest
    {
        get => _mealsQuantity;
        set
        {
            _mealsQuantity = value;
            QuantityCheck(value);
        }
    }

    bool BreakfastCheckTest
    {
        get => _breakfastCheck;
        set
        {
            _breakfastCheck = value;
            BreakfastHandleCheck(value);
        }
    }

    bool DinnerCheckTest
    {
        get => _dinnerCheck;
        set
        {
            _dinnerCheck = value;
            DinnerHandleCheck(value);
        }
    }

    void BreakfastHandleCheck(bool isChecked)
    {
        if (!isChecked || _mealsQuantity != 2) return;
        _dinnerCheck = false;
        DinnerSatiety = SatietyEnum.Normal;
        _dinnerSelectDisableValue = true;
        _breakfastSelectDisableValue = false;
    }

    void DinnerHandleCheck(bool isChecked)
    {
        if (!isChecked || _mealsQuantity != 2) return;
        _breakfastCheck = false;
        _breakfastSelectDisableValue = true;
        _dinnerSelectDisableValue = false;
        BreakfastSatiety = SatietyEnum.Normal;
    }

    void QuantityCheck(int quantity)
    {
        switch (quantity)
        {
            case 2:
                TwoMealsConfiguration();
                break;
            case 3:
                ThreeMealsConfiguration();
                break;
            case 4:
                FourMealsConfiguration();
                break;
            case 5:
                FiveMealsConfiguration();
                break;
        }
    }

    private void TwoMealsConfiguration()
    {
        _breakfastCheck = true;
        _dinnerCheck = false;
        _snackCheck = false;
        _breakfastCheckBoxDisableValue = false;
        _dinnerSelectDisableValue = true;
        _dinnerCheckBoxDisableValue = false;
        _snackCheckBoxDisableValue = true;
        _snackSelectDisableValue = true;
        _snackSatiety = SnackEnum.None;
    }

    private void ThreeMealsConfiguration()
    {
        _breakfastCheck = true;
        _dinnerCheck = true;
        _breakfastCheckBoxDisableValue = true;
        _dinnerCheckBoxDisableValue = true;
        _dinnerSelectDisableValue = false;
        _breakfastSelectDisableValue = false;
        _snackCheck = false;
        _snackCheckBoxDisableValue = true;
        _snackSelectDisableValue = true;
        _snackSatiety = SnackEnum.FromToken(Snack.None);
    }

    private void FourMealsConfiguration()
    {
        _breakfastCheck = true;
        _dinnerCheck = true;
        _snackCheck = true;
        _breakfastCheckBoxDisableValue = true;
        _dinnerCheckBoxDisableValue = true;
        _snackCheckBoxDisableValue = true;
        _breakfastSelectDisableValue = false;
        _dinnerSelectDisableValue = false;
        _snackSelectDisableValue = false;
        _snackSatiety = SnackEnum.Brunch;
        SnackEnumList = SnackEnum.NonNullValues.Take(2);
    }

    private void FiveMealsConfiguration()
    {
        _breakfastCheck = true;
        _dinnerCheck = true;
        _snackCheck = true;
        _breakfastCheckBoxDisableValue = true;
        _dinnerCheckBoxDisableValue = true;
        _snackCheckBoxDisableValue = true;
        _breakfastSelectDisableValue = false;
        _dinnerSelectDisableValue = false;
        _snackSelectDisableValue = true;
        _snackSatiety = SnackEnum.Both;
        SnackEnumList = SnackEnum.NonNullValues.Take(3);
        
    }


    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private void Submit() => MudDialog?.Close(DialogResult.Ok(true));
    
    private void Cancel() => MudDialog?.Cancel();
    
    protected override void OnInitialized() => DailyConfigurationState.OnChange += StateHasChanged;
    
    public void Dispose() => DailyConfigurationState.OnChange -= StateHasChanged;
}