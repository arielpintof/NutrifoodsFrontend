@page "/MealPlan"
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.Data.State
@using NutrifoodsFrontend.Services
@using NutrifoodsFrontend.UtilsFolder.Enums
@using NutrifoodsFrontend.UtilsFolder.ToolTip
@inject IJSRuntime JsRuntime
@inject DailyMenuState DailyMenuState
@inject AuthenticationStateProvider AuthState
@inject DailyConfigurationState DailyConfigurationState
@inject UserEnergyState UserEnergyState
@inject IDailyMealPlanService MealPlanService
@inject IUserService UserService

@if (MealPlanResponse is null)
{
    <MudContainer>
        <div class="d-flex justify-center align-content-center mt-10">
            <MudProgressCircular Class="mr-2" Color="Color.Primary" Indeterminate="true"/>
            <MudText Typo="Typo.h6">@InfoMessage.MealPlanLoading</MudText>
        </div>
    </MudContainer>
}
else
{
    @if (!MealPlanResponse.IsSuccessStatusCode)
    {
        <MudText>Error @MealPlanResponse.ReasonPhrase</MudText>
    }
    else
    {
        <MudContainer Class="mt-3" MaxWidth="MaxWidth.Small">
            <CaloriesTotal Macronutrients="TotalMacronutrients()" OnDailyConfigurationChanged="DailyConfigurationChanged"/>
            @foreach (var menu in DailyMealPlan!.DailyMenus)
            {
                <div class="mt-1">
                    <MealComponent MenuRecipes=@menu.MenuRecipes MealType=@menu.MealType Satiety=@menu.Satiety
                                   EnergyTotal=@menu.EnergyTotal OnDailyMenuChanged="DailyMenuChanged"
                                   IconIsVisible=@IconIsVisible />
                </div>
            }
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex justify-space-between mt-3 mb-3">
                        <MudButton Style="width: 35%; height: 50%;" Class="pa-3 rounded-pill flex-shrink-1" Size="Size.Large" Variant="Variant.Filled"
                                   Color="Color.Primary">
                            Confirmar
                        </MudButton>
                        
                        <MudButton Style="width: 35%; height: 50%;" Class="pa-3 rounded-pill flex-shrink-1" Size="Size.Large" Variant="Variant.Filled"
                                   Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="OnInitializedAsync">
                            Regenerar
                        </MudButton>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex justify-end mt-3 mb-3">
                        <MudButton Style="width: 175px; height: 50px;" Class="pa-3 rounded-pill flex-shrink-1" Size="Size.Large" Variant="Variant.Filled"
                                   Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="OnInitializedAsync">
                            Regenerar
                        </MudButton>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </MudContainer>
    }
}


@code {
    private HttpResponseMessage? MealPlanResponse { get; set; }
    private DailyMealPlanDto? DailyMealPlan { get; set; }
    [Parameter]
    public int GuestEnergy { get; set; }
    private bool IconIsVisible { get; set; } = true;

    private Dictionary<string, int> TotalMacronutrients()
    {
        var nutrients = new Dictionary<string, int>
        {
            { "Energy", (int)DailyMealPlan!.EnergyTotal },
            { "Carbohydrates", (int)DailyMealPlan.CarbohydratesTotal },
            { "Lipids", (int)DailyMealPlan.LipidsTotal },
            { "Proteins", (int)DailyMealPlan.ProteinsTotal }
        };

        return nutrients;
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        var state = await AuthState.GetAuthenticationStateAsync();
        var isAuthenticated = state.User.Identity is {IsAuthenticated: true };
        double? userEnergy;
        
        if (isAuthenticated)
        {
            var apiKey = state.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
            var userResponse = await UserService.Find(apiKey!);
            var userContent = await userResponse!.Content.ReadFromJsonAsync<UserDto>();
            userEnergy = userContent!.TotalMetabolicRate;
        }
        else
        {
            userEnergy = UserEnergyState.Property;
        }

        var dailyConfiguration = GetDailyConfiguration();
        
        MealPlanResponse = await MealPlanService.GenerateDailyMealPlan(
            (double)userEnergy!, dailyConfiguration.IsLunchFilling, dailyConfiguration.Breakfast, dailyConfiguration.Dinner, 
            dailyConfiguration.Brunch,dailyConfiguration.Linner);
        
        DailyMealPlan = await MealPlanResponse!.Content.ReadFromJsonAsync<DailyMealPlanDto>();


        await base.OnInitializedAsync();
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
        
    }

    private void DailyMenuChanged()
    {
        var dailyMenu = DailyMenuState.Property;
        var mealMenus = DailyMealPlan!.DailyMenus.Select(x => x.MealType == dailyMenu.MealType ? dailyMenu : x).ToList();
        var totalMacronutrients = mealMenus.Aggregate(
            new { Energy = 0.0, Carbohydrates = 0.0, Lipids = 0.0, Proteins = 0.0 },
            (acc, x) => new
            {
                Energy = acc.Energy + x.EnergyTotal,
                Carbohydrates = acc.Carbohydrates + x.CarbohydratesTotal,
                Lipids = acc.Lipids + x.LipidsTotal,
                Proteins = acc.Proteins + x.ProteinsTotal
            });

        DailyMealPlan = new DailyMealPlanDto
        {
            EnergyTotal = totalMacronutrients.Energy,
            ProteinsTotal = totalMacronutrients.Proteins,
            CarbohydratesTotal = totalMacronutrients.Carbohydrates,
            LipidsTotal = totalMacronutrients.Lipids,
            DailyMenus = mealMenus
        };
    }

    private async Task DailyConfigurationChanged()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var apiKey = state.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var isAuthenticated = state.User.Identity!.IsAuthenticated;
        var userEnergy = isAuthenticated ? await GetUserEnergy(apiKey!) : UserEnergyState.Property;
        var dailyConfiguration = DailyConfigurationState.Property;
        var mealPlanResponse = await MealPlanService.GenerateDailyMealPlan(
            (double)userEnergy!, dailyConfiguration.IsLunchFilling, dailyConfiguration.Breakfast, dailyConfiguration.Dinner, 
            dailyConfiguration.Brunch,dailyConfiguration.Linner);

        DailyMealPlan = await mealPlanResponse!.Content.ReadFromJsonAsync<DailyMealPlanDto>();
    }

    private async Task<double> GetUserEnergy(string apiKey)
    {
        var userResponse = await UserService.Find(apiKey);
        var userContent = await userResponse!.Content.ReadFromJsonAsync<UserDto>();
        return (double)userContent!.TotalMetabolicRate!;
    }
    
    
    private DailyConfigurationDto GetDailyConfiguration()
    {
        var dailyConfigurationDto = DailyConfigurationState.Property;
        return dailyConfigurationDto is not null ? dailyConfigurationDto : new DailyConfigurationDto
        {
            IsLunchFilling = true,
            Breakfast = Satiety.Normal,
            Dinner = Satiety.Normal,
            Brunch = false,
            Linner = false
        };
    }
    
    


}