@page "/MealPlan"
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.Data.State
@using NutrifoodsFrontend.Services
@using NutrifoodsFrontend.UtilsFolder.Date
@using NutrifoodsFrontend.UtilsFolder.Enums
@using NutrifoodsFrontend.UtilsFolder.ToolTip
@using System.Globalization
@inject DailyMenuState DailyMenuState
@inject AuthenticationStateProvider AuthState
@inject DailyConfigurationState DailyConfigurationState
@inject UserEnergyState UserEnergyState
@inject IDailyMealPlanService MealPlanService
@inject IUserService UserService
@inject ISnackbar Snackbar

@if (MealPlanResponse == null)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <div class="d-flex justify-center align-content-center mt-10">
            <MudProgressCircular Class="mr-2" Color="Color.Primary" Indeterminate="true"/>
            <MudText Typo="Typo.h6">Estamos generando tu Plan Alimentario</MudText>
        </div>
    </MudContainer>
    <!-- if(UserHasNoMetrics) -->
}
else
{
    @if (!MealPlanResponse.IsSuccessStatusCode)
    {
        <MudText>Error @MealPlanResponse.ReasonPhrase</MudText>
    }
    else
    {
        <!-- MealPlan recibe una Regimen alimentario -->
        <MudContainer MaxWidth="MaxWidth.Small">

            <!-- Input: Cantidad de calorías | Destino: Componente hijo CaloriesTotal -->
            <CaloriesTotal Macronutrients="TotalMacronutrients()" OnDailyConfigurationChanged="DailyConfigurationChanged"/>
            @foreach (var menu in MealMenus)
            {
                <div class="mt-3">
                    <!-- Input: Comida del día | Destino: Componente hijo MealComponent -->
                    <MealComponent MenuRecipes=@menu.MenuRecipes MealType=@menu.MealType Satiety=@menu.Satiety
                                   EnergyTotal=@menu.EnergyTotal OnDailyMenuChanged="DailyMenuChanged"/>
                </div>
            }
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex justify-space-between mt-3 mb-3">
                        <MudButton Style="width: 175px; height: 50px;" Class="pa-3 rounded-pill" Size="Size.Large" Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   @onclick="@(() => Snackbar.Add("Plan alimentario confirmado", Severity.Success, config => { config.HideIcon = true; }))">

                            Confirmar
                        </MudButton>
                        <MudButton Style="width: 175px; height: 50px;" Class="pa-3 rounded-pill" Size="Size.Large" Variant="Variant.Filled"
                                   Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="OnInitializedAsync">
                            Regenerar
                        </MudButton>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex justify-end mt-3 mb-3">
                        <MudButton Style="width: 175px; height: 50px;" Class="pa-3 rounded-pill" Size="Size.Large" Variant="Variant.Filled"
                                   Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="OnInitializedAsync">
                            Regenerar
                        </MudButton>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </MudContainer>
    }
}



@code {
    private HttpResponseMessage? MealPlanResponse { get; set; }
    private DailyMealPlanDto? mealPlan { get; set; }
    private List<DailyMenuDto>? MealMenus { get; set; }
    private DateTime dateDisplay;
    private string userDate;

    [Parameter]
    public int GuestEnergy { get; set; }

    private int CalculateNutritionValue(Func<DailyMenuDto, int> selector) => Convert.ToInt32(MealMenus!.Sum(selector));

    private int CalculateEnergy() => CalculateNutritionValue(e => (int)e.EnergyTotal);

    private int CalculateCarbs() => CalculateNutritionValue(e => (int)e.CarbohydratesTotal);

    private int CalculateLipids() => CalculateNutritionValue(e => (int)e.LipidsTotal);

    private int CalculateProteins() => CalculateNutritionValue(e => (int)e.ProteinsTotal);

    private async Task CalculateAge()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var apiKey = state.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var userResponse = await UserService.Find(apiKey);
        var userContent = await userResponse.Content.ReadFromJsonAsync<UserDto>();
        userDate = userContent.UserData.Birthdate;
        dateDisplay = DateTime.ParseExact(userContent.UserData.Birthdate, "yyyy-MM-dd", CultureInfo.CurrentCulture).Date;
    //Age = DateOnlyUtils.Difference(DateOnlyUtils.ToDateOnly(userDate), Interval.Years);
    }

    private Dictionary<string, int> TotalMacronutrients()
    {
        var nutrients = new Dictionary<string, int>
        {
            { "Energy", CalculateEnergy() },
            { "Carbohydrates", CalculateCarbs() },
            { "Lipids", CalculateLipids() },
            { "Proteins", CalculateProteins() }
        };

        return nutrients;
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var isAuthenticated = state.User.Identity is { IsAuthenticated: true };
        var userEnergy = isAuthenticated ? 3000 : UserEnergyState.Property;

        MealPlanResponse = await MealPlanService.GenerateDailyMealPlan(
            userEnergy, true, Satiety.Filling, Satiety.Normal);

        mealPlan = await MealPlanResponse!.Content.ReadFromJsonAsync<DailyMealPlanDto>();
        MealMenus = mealPlan?.DailyMenus.ToList();

        await base.OnInitializedAsync();
    }

    private void DailyMenuChanged()
    {
        var dailyMenu = DailyMenuState.Property;
        var temp = MealMenus!.Select(x => x.MealType == dailyMenu.MealType ? dailyMenu : x).ToList();
        MealMenus = temp;
    }

    private async Task DailyConfigurationChanged()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var isAuthenticated = state.User.Identity is { IsAuthenticated: true };
        var userEnergy = isAuthenticated ? 3000 : UserEnergyState.Property;
        var dailyConfiguration = DailyConfigurationState.Property;
        var mealPlanResponse = await MealPlanService.GenerateDailyMealPlan(
            userEnergy, dailyConfiguration.IsLunchFilling, dailyConfiguration.Breakfast, dailyConfiguration.Dinner);
        mealPlan = await mealPlanResponse.Content.ReadFromJsonAsync<DailyMealPlanDto>();
        var temp = mealPlan.DailyMenus;
        MealMenus.Clear();
        MealMenus = temp.ToList();
    }

}

