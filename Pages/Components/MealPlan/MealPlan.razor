@page "/MealPlan"
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.Data.State
@using NutrifoodsFrontend.Services
@using NutrifoodsFrontend.UtilsFolder.Enums
@inject DailyMenuState DailyMenuState
@inject AuthenticationStateProvider AuthState
@inject UserEnergyState UserEnergyState
@inject IDailyMealPlanService MealPlanService
@inject ISnackbar Snackbar

@if (MealPlanResponse == null)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <div class="d-flex justify-center align-content-center mt-10">
            <MudProgressCircular Class="mr-2" Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h6">Estamos generando tu Plan Alimentario</MudText> 
        </div> 
    </MudContainer>
    <!-- if(UserHasNoMetrics) -->
}
else
{
    @if (!MealPlanResponse.IsSuccessStatusCode)
    {
        <MudText>Error @MealPlanResponse.ReasonPhrase</MudText>
    }
    else
    {
        
        <!-- MealPlan recibe una Regimen alimentario -->
        <MudContainer MaxWidth="MaxWidth.Small">

            <!-- Input: Cantidad de calorías | Destino: Componente hijo CaloriesTotal -->
            <CaloriesTotal Macronutrients="TotalMacronutrients()"/>
            @foreach(var menu in MealMenus!)
            {
                <div class="mt-3">
                    <!-- Input: Comida del día | Destino: Componente hijo MealComponent -->
                    <MealComponent MenuRecipes=@menu.MenuRecipes 
                                   MealType=@menu.MealType 
                                   Satiety=@menu.Satiety
                                   EnergyTotal=@menu.EnergyTotal
                                   OnDailyMenuChanged="DailyMenuChanged"
                                    />
                </div>
            }
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex justify-space-between mt-3 mb-3">
                        <MudButton Style="width: 175px; height: 50px;"
                                               Class="pa-3 rounded-pill"
                                               Size="Size.Large"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               @onclick="@(() => Snackbar.Add("Plan alimentario confirmado",
                                                Severity.Success, config => { config.HideIcon = true;}))">
                                                                
                                                Confirmar
                        </MudButton>
                        <MudButton Style="width: 175px; height: 50px;"
                                               Class="pa-3 rounded-pill"
                                               Size="Size.Large"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               ButtonType="ButtonType.Submit"
                                               OnClick="OnInitializedAsync">
                                               Regenerar
                        </MudButton>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex justify-end mt-3 mb-3">
                        <MudButton Style="width: 175px; height: 50px;"
                                               Class="pa-3 rounded-pill"
                                               Size="Size.Large"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               ButtonType="ButtonType.Submit"
                                               OnClick="OnInitializedAsync">
                                               Regenerar
                        </MudButton>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </MudContainer>        
    }
}



@code {
    private HttpResponseMessage? MealPlanResponse { get; set; }
    private DailyMealPlanDto? mealPlan { get; set; }
    private List<DailyMenuDto>? MealMenus { get; set; }
    [Parameter] 
    public int GuestEnergy { get; set; }
    
    private int CalculateEnergy() => Convert.ToInt32(MealMenus!.Sum(e => e.EnergyTotal));
   
    private int CalculateCarbs() => Convert.ToInt32(MealMenus!.Sum(e => e.CarbohydratesTotal));
    
    private int CalculateLipids() => Convert.ToInt32(MealMenus!.Sum(e => e.LipidsTotal));

    private int CalculateProteins() => Convert.ToInt32(MealMenus!.Sum(e => e.ProteinsTotal));
    
    private Dictionary<string, int> TotalMacronutrients()
    {
        var nutrients = new Dictionary<string, int>
        {
            { "Energy", CalculateEnergy() },
            { "Carbohydrates", CalculateCarbs() },
            { "Lipids", CalculateLipids() },
            { "Proteins", CalculateProteins() }
        };
        
        return nutrients;
    }
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var isAuthenticated = state.User.Identity is { IsAuthenticated: true };
        

        if(isAuthenticated)
        {
            MealPlanResponse = await MealPlanService.GenerateDailyMealPlan(3000, true, Satiety.Filling,
                Satiety.Filling);
        }
        else {
            var guestUserEnergy = UserEnergyState.Property;
            MealPlanResponse = await MealPlanService.GenerateDailyMealPlan(guestUserEnergy, true, Satiety.Filling,
                Satiety.Filling);
        }
        
        mealPlan = MealPlanResponse!.Content.ReadFromJsonAsync<DailyMealPlanDto>().Result;
        MealMenus = mealPlan?.DailyMenus.ToList();
        await base.OnInitializedAsync();
    }

    private void DailyMenuChanged()
    {
        var dailyMenu = DailyMenuState.Property;
        var temp = MealMenus!.Select(x => x.MealType == dailyMenu.MealType ? dailyMenu : x).ToList();
        MealMenus = temp;
    }
    

}