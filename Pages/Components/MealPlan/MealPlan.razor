@page "/MealPlan"
@inject AuthenticationStateProvider AuthState
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.Services
@inject IMealPlanService mealPlanService


@if (mealPlanResponse == null)
{
    <div class="d-flex justify-center align-center">
        <MudProgressCircular Class="mr-2" Color="Color.Primary" Indeterminate="true" />
        <MudText Typo="Typo.h6">Estamos generando tu Plan Alimentario</MudText> 
    </div>
    
}
else
{
    @if (!mealPlanResponse.IsSuccessStatusCode)
    {
        <MudText> Error @mealPlanResponse.ReasonPhrase </MudText>
    }
    else
    {
        
        <!-- MealPlan recibe una Regimen alimentario -->
        <MudContainer MaxWidth="MaxWidth.Small">

            <!-- Input: Cantidad de calorías | Destino: Componente hijo CaloriesTotal -->
            <CaloriesTotal 
                Energy="CalculateEnergy()" 
                Carbs ="CalculateCarbs()"
                Lipids ="CalculateLipids()"
                Proteins ="CalculateProteins()"
            />
            @foreach(var menu in mealPlan.MealMenus)
            {
            
                <div class="mt-3">
                    <!-- Input: Comida del día | Destino: Componente hijo MealComponent -->
                    <MealComponent MenuRecipes=@menu.MenuRecipes />
                </div>
            }
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex justify-space-between mt-3 mb-3">
                        <MudButton Style="width: 175px; height: 50px;"
                               Class="pa-3 rounded-pill"
                               Size="Size.Large"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               ButtonType="ButtonType.Submit">
                                Confirmar
                        </MudButton>
                        <MudButton Style="width: 175px; height: 50px;"
                               Class="pa-3 rounded-pill"
                               Size="Size.Large"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               ButtonType="ButtonType.Submit"
                               OnClick="OnInitializedAsync">
                            Regenerar
                        </MudButton>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex justify-end mt-3 mb-3">
                        <MudButton Style="width: 175px; height: 50px;"
                               Class="pa-3 rounded-pill"
                               Size="Size.Large"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               ButtonType="ButtonType.Submit"
                               OnClick="OnInitializedAsync">
                                Regenerar
                        </MudButton>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
            
        </MudContainer>        
    }
}



@code {

    private bool IsAuthenticated = false;
    public HttpResponseMessage? mealPlanResponse { get; set; }
    public MealPlanDto? mealPlan { get; set; }

    public int Energy;
    public int Carbs;
    public int Proteins;
    public int Lipids;
   

    public int _energy
    {
        get { return Energy; }
        set { Energy = CalculateEnergy(); }
    }
    public int _carbs
    {
        get { return Carbs; }
        set { Carbs = CalculateCarbs(); }
    }
    public int _proteins
    {
        get { return Proteins; }
        set { Proteins = CalculateProteins(); }
    }
    public int _lipids
    {
        get { return Lipids; }
        set { Lipids = CalculateLipids(); }
    }

    protected override async Task OnInitializedAsync()
    {
        /*var state = await AuthState.GetAuthenticationStateAsync();
        IsAuthenticated = state.User.Identity.IsAuthenticated;*/

        mealPlanResponse = await mealPlanService.GenerateBasedOnMbr(2000, "Y", "Normal", "Normal");
        mealPlan = mealPlanResponse.Content.ReadFromJsonAsync<MealPlanDto>().Result;
        await base.OnInitializedAsync();
    }

    public int CalculateEnergy()
    {
        return Convert.ToInt32(mealPlan.MealMenus.Sum(e => e.EnergyTotal));       
    }

    public int CalculateCarbs()
    {
        return Convert.ToInt32(mealPlan.MealMenus.Sum(e => e.CarbohydratesTotal));
    }

    public int CalculateLipids()
    {
        return Convert.ToInt32(mealPlan.MealMenus.Sum(e => e.LipidsTotal));
    }

    public int CalculateProteins()
    {
        return Convert.ToInt32(mealPlan.MealMenus.Sum(e => e.ProteinsTotal));
    }
}