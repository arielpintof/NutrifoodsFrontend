@using NutrifoodsFrontend.Data.Dto;
@using NutrifoodsFrontend.Data.State
@using NutrifoodsFrontend.Services
@using NutrifoodsFrontend.UtilsFolder.Enums
@using NutrifoodsFrontend.UtilsFolder.ToolTip
@inject DailyMenuState DailyMenuState
@inject IDailyMenuService DailyMenuService
@inject AuthenticationStateProvider AuthState
@implements IDisposable

<div class="d-flex flex-column">
    <MudPaper Class="pl-6 pr-4 pt-2 pb-3" Style="background-color: #FFFFFF" Width="100%" Height="50%" Elevation="0">
        <div Class="d-flex justify-space-between align-center flex-grow-1" Elevation="0">
            <MudText Typo="Typo.h6">@MealType</MudText>
            <MudText>@EnergyTotal</MudText>
            <AuthorizeView>
                <Authorized>
                    @if (IconIsVisible)
                    {
                        <MudTooltip Text="@InfoMessage.RegenerateMealMenu(MealType)" Arrow="true" Placement="Placement.Right">
                            <MudIconButton Class="@(IsLoading ? "circular-loader" : "")" @onclick="OnProcessing" 
                                           Size="Size.Small" Icon="@Icons.Filled.Autorenew" Disabled="IsLoading"/>
                        </MudTooltip>
                    }
                </Authorized>
            </AuthorizeView>
        </div>
        
        <div class="d-flex flex-column">
            @if (MenuRecipes == null)
            {
                <div class="d-flex justify-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                </div>
            }
            else
            {
                foreach (var menu in MenuRecipes)
                {
                    <div>
                        <RecipeComponent Quantity=@menu.Portions Name=@menu.Recipe.Name></RecipeComponent>
                    </div>
                }
            }
        </div>
    </MudPaper>
</div>

@code {

    [Parameter]
    public IEnumerable<MenuRecipeDto>? MenuRecipes { get; set; }

    [Parameter]
    public string MealType { get; set; } = null!;

    [Parameter]
    public string Satiety { get; set; } = null!;

    [Parameter]
    public double EnergyTotal { get; set; }

    [Parameter]
    public EventCallback OnDailyMenuChanged { get; set; }

    [Parameter]
    public bool IconIsVisible { get; set; }

    protected override void OnInitialized() => DailyMenuState.OnChange += StateHasChanged;
    
    private bool IsLoading { get; set; }
    private string Cursor { get; set; } = string.Empty;

    private async Task OnProcessing()
    {
        IsLoading = true;
        Cursor = "cursor-progress";
        await ChangePropertyValue();
        IsLoading = false;
        Cursor = string.Empty;
    }
    private async Task ChangePropertyValue()
    {
        MenuRecipes = null;
        var dailyMenuResponse = await DailyMenuService.GenerateDailyMenu(
            EnergyTotal, MealTypeEnum.FromReadableName(MealType)!.Token, SatietyEnum.FromReadableName(Satiety)!.Token);
        var dailyMenuContent = await dailyMenuResponse!.Content.ReadFromJsonAsync<DailyMenuDto?>();
        DailyMenuState.Property = dailyMenuContent!;
        await OnDailyMenuChanged.InvokeAsync();
    }

    public void Dispose() => DailyMenuState.OnChange -= StateHasChanged;

}

<style>
    .meal-type-text{
        font-size: 16px;
        line-height: 15px;
        font-weight: 700;
        color: #2d303c;
    }
     @@keyframes rotate {
        from {
            transform: rotate(0deg);
        }
        to { 
            transform: rotate(360deg);
        }
    }
    .circular-loader {
        animation: rotate 2s linear infinite;
    }
     
    
    
    
</style>