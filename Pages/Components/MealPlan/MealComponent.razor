@using NutrifoodsFrontend.Data.Dto;
@using NutrifoodsFrontend.Data.State
@using NutrifoodsFrontend.Services
@using NutrifoodsFrontend.UtilsFolder.Enums
@using NutrifoodsFrontend.UtilsFolder.ToolTip
@inject DailyMenuState DailyMenuState
@inject IDailyMenuService DailyMenuService
@inject AuthenticationStateProvider AuthState
@implements IDisposable

<MudStack>
    <MudPaper Class="pa-4" Style="background-color: #FFFFFF" Width="100%" Height="50%">
        <MudStack>
            <div Class="d-flex justify-space-between align-center flex-grow-1" Elevation="0">
                <MudText Class="pl-3" Typo="Typo.h6">@MealType</MudText>
                <AuthorizeView>
                    <Authorized>
                        @if (IconIsVisible)
                        {
                            <MudTooltip Text="@InfoMessage.RegenerateMealMenu(MealType)" Arrow="true" Placement="Placement.Right">
                                <MudIconButton @onclick="ChangePropertyValue" Size="Size.Medium" Icon="@Icons.Filled.Autorenew"/>
                            </MudTooltip> 
                        }
                        
                    </Authorized>
                </AuthorizeView>
            </div>
        </MudStack>
        <MudList>
            @if (MenuRecipes == null)
            {
                <div class="d-flex justify-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                </div>
            }
            else
            {
                foreach (var menu in MenuRecipes)
                {
                    <MudListItem>
                        <RecipeComponent Quantity=@menu.Portions Name=@menu.Recipe.Name></RecipeComponent>
                    </MudListItem>
                }
            }
        </MudList>
    </MudPaper>
</MudStack>

@code {

    [Parameter]
    public IEnumerable<MenuRecipeDto>? MenuRecipes { get; set; }

    [Parameter]
    public string MealType { get; set; } = null!;

    [Parameter]
    public string Satiety { get; set; } = null!;

    [Parameter]
    public double EnergyTotal { get; set; }

    [Parameter]
    public EventCallback OnDailyMenuChanged { get; set; }
    
    [Parameter]
    public bool IconIsVisible { get; set; }

    protected override void OnInitialized() => DailyMenuState.OnChange += StateHasChanged;

    private async Task ChangePropertyValue()
    {
        MenuRecipes = null;
        var dailyMenuResponse = await DailyMenuService.GenerateDailyMenu(
            EnergyTotal, 
            MealTypeEnum.FromReadableName(MealType)!.Token,
            SatietyEnum.FromReadableName(Satiety)!.Token);
        var dailyMenuContent = await dailyMenuResponse!.Content.ReadFromJsonAsync<DailyMenuDto?>();
        DailyMenuState.Property = dailyMenuContent!;
        await OnDailyMenuChanged.InvokeAsync();
    }

    public void Dispose() => DailyMenuState.OnChange -= StateHasChanged;



}