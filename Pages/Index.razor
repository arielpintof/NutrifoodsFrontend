@page "/"
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.UtilsFolder.ToolTip
@using NutrifoodsFrontend.Services
@using System.Net
@inject AuthenticationStateProvider AuthState
@inject IUserService UserService
@inject NavigationManager Nav

<div style="background-color: #f9f9f9">
    <MudContainer>
        @if (!_hasMetrics)
            {
                <div class="d-flex justify-center pa-3">
                    <MudAlert @onclick="NavigateToData" ContentAlignment="@HorizontalAlignment.Center" Severity="@Severity.Warning"
                              Variant="@Variant.Outlined">
                        @InfoMessage.UserWarning
                    </MudAlert>
                </div>
            }
        <div class="jumbo-background">
            <div class="d-flex flex-column">
                <Jumbotron class="mr-6 pr-6">
                    <h1>Obten un plan alimentario de acuerdo a tus necesidades</h1>
                    <p class="mt-3">Lorem ipsum dolor sit amet, consectetur adipiscing elit, 
                        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. </p>
                </Jumbotron>
                <div class="d-flex mt-6">
                    <MudButton Style="width: 175px; height: 50px;" Class="rounded-pill pa-3" Size="Size.Large"
                               Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
                        Empezar
                    </MudButton>
                </div>
            </div>

            <img src="https://stories.freepiklabs.com/storage/64920/eating-healthy-food-pana-3101.png" width="475" height="475" alt="">
        </div>
    </MudContainer>

</div>



<PageTitle>Inicio - Nutrifoods</PageTitle>



@code {
    private bool _hasMetrics = true;
    private UserDto? _user { get; set; }
    private UserDto? _userFromNutrifoods { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var isAuthenticated = state.User.Identity!.IsAuthenticated;
        if (!isAuthenticated)
        {
            await base.OnInitializedAsync();
            return;
        }

        var apiKey = state.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var findUserResponse = await UserService.Find(apiKey);
        if (findUserResponse.StatusCode != HttpStatusCode.NotFound)
        {
            _user = await findUserResponse.Content.ReadFromJsonAsync<UserDto>();
            _hasMetrics = (_user.UserData != null && _user.UserBodyMetrics.Count != 0);
            return;
        }

        var nickName = state.User.Claims.FirstOrDefault(c => c.Type == "nickname")?.Value;
        var email = state.User.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
        var saveUserResponse = await UserService.SaveUser(nickName!, email!, apiKey);
        if (saveUserResponse!.IsSuccessStatusCode)
        {
            _user = await saveUserResponse.Content.ReadFromJsonAsync<UserDto>();
            _hasMetrics = (_user.UserData != null && _user.UserBodyMetrics.Count != 0);
        }

        await base.OnInitializedAsync();
    }

    private void NavigateToData()
    {
        Nav.NavigateTo("/personaldata");
    }

}
<style>
   p {
       font-size: 1.2rem;
   }
       
   h1, p {
       color: #545151;
   }
   .jumbo-background{
       display: flex;
       flex-direction: row;
       justify-content: space-between;
       align-items: center;
       margin-left: 3rem;
       margin-right: 3rem;
   }
   h1 {
       font-size: 2.9rem;
   } 
</style>
