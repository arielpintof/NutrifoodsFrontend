@page "/"
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.UtilsFolder.ToolTip
@using NutrifoodsFrontend.Services
@using System.Net
@using System.Security.Claims
@inject AuthenticationStateProvider AuthState
@inject IUserService UserService
@attribute [Authorize]

@if (!_hasMetrics)
{
   <div class="d-flex justify-center mt-3">
        <MudAlert ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning" Variant="Variant.Outlined">@InfoMessage.UserWarning</MudAlert>
   </div> 
}


<PageTitle>Index</PageTitle>

@if (_user != null)
{
    <MudText>@_user.Email</MudText>
    <MudText>@_user.Id</MudText>
    <MudText>@_user.Username</MudText>
    <MudText>@_user.ApiKey</MudText>
}





<br />


@code {
    
    private string? Email { get; set; }
    private DateTime JoinedOn { get; } = DateTime.Now;
    private bool _hasMetrics;
    public UserDto? _user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var isAuthenticated = state.User.Identity is { IsAuthenticated: true };
        
        if(isAuthenticated)
        {
            var apiKey = state.User.Claims.Where(c => c.Type.Equals(Claims.NameIdentifier)).Select(c => c.Value)
                .FirstOrDefault() ?? string.Empty;
            var findUserResponse = await UserService.Find(apiKey);
            
            if (findUserResponse != null)
            {
                HttpResponseMessage? saveUserResponse = null;
                if (findUserResponse.StatusCode == HttpStatusCode.NotFound)
                {
                    var nickName = state.User.Claims.Where(c => c.Type.Equals("nickname")).Select(c => c.Value)
                        .FirstOrDefault() ?? string.Empty;
                    var email= state.User.Claims.Where(c => c.Type.Equals("name")).Select(c => c.Value)
                        .FirstOrDefault() ?? string.Empty;
                    saveUserResponse = await UserService.SaveUser(nickName, email, apiKey);
                                    
                    if (saveUserResponse is {IsSuccessStatusCode: true })
                    {
                        _user = saveUserResponse.Content.ReadFromJsonAsync<UserDto>().Result;
                    }
                }
                else
                {
                    _user = findUserResponse.Content.ReadFromJsonAsync<UserDto>().Result;
                }
            }            
        }

        await base.OnInitializedAsync();
    }

    //private bool DisplayAlert() => UserMetricsCheck().Result;

    /*private async Task RegisterUserCheck()
    {
        var isRegisteredResponse = await UserService.Find(ApiKey);
        var isRegistered = isRegisteredResponse.IsSuccessStatusCode;

        if (!isRegistered)
        {
            // SaveUser(Nickname, Email, ApiKey, JoinedOn);
        }

    }

    private async Task<bool> UserMetricsCheck()
    {
        var isRegisteredResponse = await UserService.Find(ApiKey);
        var userData = isRegisteredResponse.Content.ReadFromJsonAsync<UserDto>().Result;

        return userData == null ? true : false;
    }*/
    
    
    
}