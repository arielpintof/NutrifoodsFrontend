@page "/"
@using NutrifoodsFrontend.Data.Dto
@using NutrifoodsFrontend.UtilsFolder.ToolTip
@using NutrifoodsFrontend.Services
@using System.Net
@inject AuthenticationStateProvider AuthState
@inject IUserService UserService
@inject NavigationManager Nav

<div style="background-color: #f9f9f9">
    <MudContainer>
        @if (!_hasMetrics)
            {
                <div class="d-flex justify-center pa-3">
                    <MudAlert @onclick="NavigateToData" ContentAlignment="@HorizontalAlignment.Center" Severity="@Severity.Warning"
                              Variant="@Variant.Outlined">
                        @InfoMessage.UserWarning
                    </MudAlert>
                </div>
            }
        <div class="jumbo-background">
            <div class="d-flex flex-column">
                <Jumbotron class="mr-6 pr-6">
                    <h1>Obten un plan alimentario de acuerdo a tus necesidades</h1>
                    <p class="mt-3">Lorem ipsum dolor sit amet, consectetur adipiscing elit, 
                        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. </p>
                </Jumbotron>
                <div class="d-flex mt-6 ">
                    <MudButton Class="rounded-pill pa-3 mud-elevation-10" Size="Size.Large" Variant="Variant.Filled" 
                               Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="@ButtonClick">
                        Empezar
                    </MudButton>
                </div>
            </div>

            <img src="https://stories.freepiklabs.com/storage/64920/eating-healthy-food-pana-3101.png" width="475" height="475" alt="">
        </div>
    </MudContainer>

</div>



<PageTitle>Inicio - Nutrifoods</PageTitle>



@code {
    private bool _hasMetrics = true;
    private UserDto? User { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var isAuthenticated = state.User.Identity!.IsAuthenticated;
        if (!isAuthenticated)
        {
            await base.OnInitializedAsync();
            return;
        }

        var apiKey = state.User.Claims.FirstOrDefault(c => c.Type == Claims.NameIdentifier)?.Value;
        var findUserResponse = await UserService.Find(apiKey!);
        if (findUserResponse!.StatusCode != HttpStatusCode.NotFound)
        {
            User = await findUserResponse.Content.ReadFromJsonAsync<UserDto>();
            _hasMetrics = (User!.UserData != null && User.UserBodyMetrics.Count != 0);
            return;
        }

        var nickName = state.User.Claims.FirstOrDefault(c => c.Type == "nickname")?.Value;
        var email = state.User.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
        var saveUserResponse = await UserService.SaveUser(nickName!, email!, apiKey!);
        if (saveUserResponse!.IsSuccessStatusCode)
        {
            User = await saveUserResponse.Content.ReadFromJsonAsync<UserDto>();
            _hasMetrics = (User!.UserData != null && User.UserBodyMetrics.Count != 0);
        }

        await base.OnInitializedAsync();
    }
    
    private async Task ButtonClick()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var isAuthenticated = state.User.Identity!.IsAuthenticated;
        if (!isAuthenticated)
        {
            Nav.NavigateTo("/Invitado");
        }
        else
        {
            Nav.NavigateTo("/personaldata");
        }
    }
    private void NavigateToData()
    {
        Nav.NavigateTo("/personaldata");
    }

}
<style>
   h1, p {
       color: #545151;
   }
   @@media screen and (min-width: 601px) {
      h1 {
          font-size: 2.5rem;
      } 
      p {
          font-size: 1.5rem;
      }
      .rounded-pill {
          width: 195px;
          height: 60px;
          font-size: 1rem;
      }
      .jumbo-background{
          display: flex;
          flex-direction: row;
          justify-content: space-between;
          align-items: center;
          margin-left: 3rem;
          margin-right: 3rem;
          margin-bottom: auto;
      }
   }
   @@media screen and (max-width: 600px) {
      h1 {
          font-size: 3rem;
      } 
      p {
          font-size: 1.0rem;
      }
      .jumbo-background{
          flex-flow: column wrap;
      }
      .rounded-pill {
          width: 205px;
          height: 90px;
          font-size: 1.5rem;
      }
   }
   img {
        width: 100%;
        height: auto;
   }
</style>